name: my-project-frontend

on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
env:
  DOCKER_IMAGE_TAG: 1.0.0-${{github.run_number}}
jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
        # Install node js
    - name: Setup Node.js environment
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - uses: actions/cache@v2
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-    

    - name: Install Dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: |
        npm install

    - name: Lint
      run: |
        npm run lint

    - name: Test
      run: |
        npm run test --prod

  build:
    name: Build
    runs-on: ubuntu-latest
    #Depends on lint's job
    needs: lint
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Install node js
    - name: Setup Node.js environment
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
        
    - uses: actions/cache@v2
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-    

    - name: Install Dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: |
        npm install

    - name: Build code
      run: npm run cibuild

    - name: Build the Docker image
      run: docker build --tag vigneshsweekaran/easyclaim-frontend:latest .

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/my-project-frontend:${{ env.DOCKER_IMAGE_TAG }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Infrastructure Project 
      uses: actions/checkout@v2
      with: 
        repository: ivan-krushkov/telerik-final-project
        token: ${{ secrets.ACTIONS_TOKEN }}

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.6.1"

    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      run: |
       cd kustomize/base/frontend
       kustomize edit set image easyclaim-frontend-image=$DOCKER_USERNAME/my-project-frontend:$DOCKER_IMAGE_TAG
       cat kustomization.yaml

    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump docker tag"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ACTIONS_TOKEN }}
